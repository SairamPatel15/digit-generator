# -*- coding: utf-8 -*-
"""digit-generator

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11-04nMSNQOruia3f0eLkCLhgNkKWzbNG
"""

# FULL GAN TRAINING + IMAGE GENERATION (Colab version)

import torch
from torch import nn
from torchvision import datasets, transforms
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt
import numpy as np

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Using device: {device}")

transform = transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.5,), (0.5,))
])
mnist = datasets.MNIST(root='./data', train=True, transform=transform, download=True)
dataloader = DataLoader(mnist, batch_size=128, shuffle=True)

class Generator(nn.Module):
    def __init__(self, latent_dim=100):
        super().__init__()
        self.model = nn.Sequential(
            nn.Linear(latent_dim + 10, 256),
            nn.ReLU(True),
            nn.Linear(256, 512),
            nn.ReLU(True),
            nn.Linear(512, 784),
            nn.Tanh()
        )

    def forward(self, z, labels):
        x = torch.cat((z, labels), dim=1)
        out = self.model(x)
        return out.view(-1, 1, 28, 28)

class Discriminator(nn.Module):
    def __init__(self):
        super().__init__()
        self.model = nn.Sequential(
            nn.Linear(784 + 10, 512),
            nn.LeakyReLU(0.2),
            nn.Linear(512, 256),
            nn.LeakyReLU(0.2),
            nn.Linear(256, 1),
            nn.Sigmoid()
        )

    def forward(self, img, labels):
        x = torch.cat((img.view(img.size(0), -1), labels), dim=1)
        return self.model(x)

def one_hot(labels, num_classes=10):
    return torch.nn.functional.one_hot(labels, num_classes).float().to(device)

latent_dim = 100
G = Generator(latent_dim).to(device)
D = Discriminator().to(device)
criterion = nn.BCELoss()
opt_G = torch.optim.Adam(G.parameters(), lr=0.0002)
opt_D = torch.optim.Adam(D.parameters(), lr=0.0002)

epochs = 10
for epoch in range(epochs):
    for imgs, lbls in dataloader:
        imgs, lbls = imgs.to(device), lbls.to(device)
        bs = imgs.size(0)
        valid = torch.ones(bs, 1).to(device)
        fake = torch.zeros(bs, 1).to(device)

        opt_G.zero_grad()
        z = torch.randn(bs, latent_dim).to(device)
        gen_lbls = torch.randint(0, 10, (bs,), device=device)
        gen_lbls_oh = one_hot(gen_lbls)
        gen_imgs = G(z, gen_lbls_oh)
        validity = D(gen_imgs, gen_lbls_oh)
        g_loss = criterion(validity, valid)
        g_loss.backward()
        opt_G.step()

        opt_D.zero_grad()
        real_lbls_oh = one_hot(lbls)
        real_validity = D(imgs, real_lbls_oh)
        d_real_loss = criterion(real_validity, valid)

        fake_validity = D(gen_imgs.detach(), gen_lbls_oh)
        d_fake_loss = criterion(fake_validity, fake)

        d_loss = (d_real_loss + d_fake_loss) / 2
        d_loss.backward()
        opt_D.step()

    print(f"Epoch {epoch+1}/{epochs} | D Loss: {d_loss.item():.4f} | G Loss: {g_loss.item():.4f}")

torch.save(G.state_dict(), "generator_mnist.pth")
print("âœ… Model saved as generator_mnist.pth")

# Generate samples
def generate_digit_samples(G, digit=7, count=5):
    G.eval()
    z = torch.randn(count, latent_dim).to(device)
    labels = torch.full((count,), digit, dtype=torch.long).to(device)
    labels_oh = one_hot(labels)
    with torch.no_grad():
        samples = G(z, labels_oh).cpu().numpy()

    fig, axs = plt.subplots(1, count, figsize=(10, 2))
    for i in range(count):
        axs[i].imshow(samples[i][0], cmap='gray')
        axs[i].axis('off')
    plt.show()

generate_digit_samples(G, digit=7)



